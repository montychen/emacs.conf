* 安装 spacemacs
  1、如果之前有 emacs 或 spacemacs，先清除配置文件或做好备份，如：
  #+begin_src sh
	cd ~
	mv .spacemacs .spacemacs.bak
	mv .emacs.d .emacs.d.bak
	mv .emacs .emacs.bak
  #+end_src

  2、 安装 Emacs For Mac OS X  [[https://emacsformacosx.com/]]
  #+begin_src sh
	brew cask install emacs
  #+end_src

  3、安装 spacemacs 的 **开发** 分支, 而不是 master 分支
  #+begin_src sh
	git clone -b develop https://github.com/syl20bnr/spacemacs ~/.emacs.d
  #+end_src

  4、启用国内的镜像
  #+begin_src sh
	vim .emacs.d/core/templates/.spacemacs.template
  #+end_src
  在 (defun dotspacemacs/user-init () 下加入 **develop 分支的镜像**
  #+begin_src elisp
	(setq configuration-layer-elpa-archives
		  '(("melpa-cn" . "http://mirrors.cloud.tencent.com/elpa/melpa/")
			("org-cn"   . "http://mirrors.cloud.tencent.com/elpa/org/")
			("gnu-cn"   . "http://mirrors.cloud.tencent.com/elpa/gnu/")))
  #+end_src

  5、安装完毕，运行 emacs


* 中文相关
** 退出 insert 模式时，自动切成英文输入法。fcitx.el  配合 fcitx-remote-for-osx 来实现
*** step1： 在 dotspacemacs-configuration-layers 中配置并启用 chinese，并启用 fcitx.el
	#+begin_src elisp
	  (chinese :variables
			   chinese-enable-fcitx t)
	#+end_src


*** setp2 在 dotspacemacs/user-config()
	#+begin_src elisp
	  ;; Make sure the following comes before `(fcitx-aggressive-setup)'
	  (setq fcitx-active-evil-states '(insert emacs hybrid)) ; For Spacemacs use hybrid mode。 默认方式是 '(insert emacs)
	  (fcitx-aggressive-setup)   ; 如果要在 minibuffer 里输入中文，就改成 （ fcitx-default-setup ）
	  (fcitx-prefix-keys-add "M-m") ; M-m is common in Spacemacs
	  ;; (setq fcitx-use-dbus t) ; uncomment if you're using Linux
	#+end_src

*** step3 在 macOS 终端用 brew 安装 fcitx-remote-for-osx
	#+begin_src bash
	  brew tap xcodebuild/fcitx-remote-for-osx   # 取消 tap 用  brew untap xcodebuild/fcitx-remote-for-osx；  显示当前有那些仓库可用 brew tap
	  brew install xcodebuild/fcitx-remote-for-osx/fcitx-remote-for-osx --with-sogou-pinyin   # --with-sogou-pinyin 表示搜狗拼音
	  brew info xcodebuild/fcitx-remote-for-osx/fcitx-remote-for-osx    # 查看支持其他输入法的选项。
	#+end_src

*** setp4 参考 [[https://github.com/xcodebuild/fcitx-remote-for-osx]] 在 macOS 在输入法面板设置“选择下一个输入法的快捷键”为：Ctrl-Shift-z

**  解决 org-table 中英混排对齐问题
*** 方法一:  Ubuntu Mono 的中文字体宽度是英文字体宽度 2 倍的字体
**** 安装字体
	 Ubuntu Mono: https://design.ubuntu.com/font/    Ubuntu Mono 的中文字体宽度是英文字体宽度 2 倍的字体
	 Source Code Pro:  https://github.com/adobe-fonts/source-code-pro
**** 设置默认字体
	 #+begin_src elisp

	   dotspacemacs-default-font '("Source Code Pro"
								   :size 14	; 改成15大小看起来更舒服，不过似乎表格就不对齐了。
								   :weight normal
								   :width normal
								   :powerline-scale 1.1)
	 #+end_src

**** 在(defun dotspacemacs/user-config () 中单独设置 org-table 的中文字体
	 #+begin_src elisp
	   (custom-set-faces
		'(org-table ((t (:foreground "#6c71c4" :family "Ubuntu Mono")))))
	 #+end_src


*** 方法二： 根据默认字体的大小，找到一个初始宽度为默认字体宽度２倍的中文字体
	# 设定一个中文字体相对默认字体的放缩比例，比如英文字体是 Meslo LG M :size 14 ，
	# 中文字体 Noto Sans Mono CJK SC 放缩比例 1.2 正合适。这种方法的缺点是，字体不好找。
**** 安装字体
	 Meslo LG M  : https://github.com/andreberg/Meslo-Font

	 Noto Sans Mono CJK SC : https://www.google.com/get/noto/  下载这个 Noto Sans CJK SC

**** 设置默认字体
	 #+begin_src elisp
	   dotspacemacs-default-font '("Meslo LG M"
								   :size 14	; 改成15大小看起来更舒服，不过似乎表格就不对齐了。
								   :weight normal
								   :width normal
								   :powerline-scale 1.1)
	 #+end_src



**** 在(defun dotspacemacs/user-config () 设置默认字体宽度２倍的中文字体
	 # ;;当遇到 kana han symbol cjk-misc bopomofo 字符集时，Emacs 明白需要使用
	 # ;; Noto Sans Mono CJK SC 字体，同时设置缩放比例
	 #+begin_src elisp
	   (dolist (charset '(kana han symbol cjk-misc bopomofo))
		 (set-fontset-font (frame-parameter nil 'font)
						   charset (font-spec :family "Noto Sans Mono CJK SC"))
		 (setq face-font-rescale-alist '(("Noto Sans Mono CJK SC" . 1.2))))

	 #+end_src

* UI 设置

** 启用 monokai 配色
*** step1: 在 dotspacemacs-configuration-layers 启用 themes-megapack

*** step2: 在 dotspacemacs-themes 加入 monokai


*** 这个好像在 0.300 的版本中不起作用了: 在(custom-set-variables 设置 monokai 高亮选中文本的颜色
	'(monokai-highlight "#8B4513")

** 设置高亮选中文本的颜色
   1、 M-x customize-face 回车，在提示输入时输入 region

   2、设置 background "#FF9933"   foreground "black", 只设置这 2 项，然后保存。

   你也可以自直接在.spacemacs 配置文件的尾部直接加入：
   #+begin_src elisp
	 (defun dotspacemacs/emacs-custom-settings ()
	   (custom-set-variables

		)

	   (custom-set-faces
		'(region ((t (:background "#FF9933" :foreground "black"))))  ;; 主要是这行
		)
	   )

   #+end_src

   3、也可以运行 M-x list-faces-display 获取当前系统所有高亮的设置，然后选择要修改的项进行配置。如这里设置swiper和iedit搜索结果的高亮配置。参考 [[https://emacs.stackexchange.com/questions/47795/spacemacs-how-can-i-customize-the-highlight-style-of-a-matching-parenthesis]]
   #+begin_src elisp
	 '(swiper-background-match-face-1 ((t (:background "#FF9933" :foreground "black"))))
	 '(swiper-background-match-face-2 ((t (:background "#FF9933" :foreground "black"))))
	 '(swiper-background-match-face-3 ((t (:background "#FF9933" :foreground "black"))))
	 '(swiper-background-match-face-4 ((t (:background "#FF9933" :foreground "black"))))
	 '(swiper-match-face-2 ((t (:background "#FF9933" :foreground "black"))))
	 '(iedit-occurrence ((t (:background "#FF9933" :foreground "black"))))

   #+end_src

** buffer中搜索swiper，代码折叠yafolding； 可视化书签bm
   - 在 dotspacemacs-additional-packages 中加入 yafolding和bm
   #+begin_src elisp
	 dotspacemacs-additional-packages '(glsl-mode ; opengl 和 vukan 着色器语法高亮
										swiper		 ;缓冲区中搜索
										bm		 ; 可视化书签，方便跳转用
										yafolding ; 代码折叠
										)
   #+end_src
   - 代码折叠yafolding缺省已经有的键盘映射，不需要我们再keymap的：
	 #+begin_src elisp
	   (define-key map (kbd "<C-S-return>") #'yafolding-hide-parent-element)
	   (define-key map (kbd "<C-M-return>") #'yafolding-toggle-all)
	   (define-key map (kbd "<C-return>") #'yafolding-toggle-element)
	 #+end_src

   - 在(defun dotspacemacs/user-config () 中加入如下配置：
   #+begin_src elisp
	 ;; swiper搜索keymap
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq enable-recursive-minibuffers t)

	 (defun dj/swiper-at-point_return()		;按下回车后自动搜索光标所处下的字符串
	   (interactive)
	   (let* ((symbol-at-points (thing-at-point 'symbol))
			  (read-symbol (read-from-minibuffer (concat "Swiper [" symbol-at-points
														 "] : "))))
		 (if (equal read-symbol "")
			 (swiper symbol-at-points)
		   (swiper read-symbol))))

	 (global-set-key "\C-s" 'dj/swiper-at-point_return) ; 快捷键绑定


	 ;; 书签操作keymap
	 (global-set-key (kbd "<C-f2>") 'bm-toggle)
	 (global-set-key (kbd "<f2>")   'bm-next)
	 (global-set-key (kbd "<S-f2>") 'bm-previous)

	 (add-hook 'prog-mode-hook
			   (lambda () (yafolding-mode)))
   #+end_src
* 底部modeline使用doom-modeline
  把 dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5) 改成如下，来启用doom-modeline
  #+begin_src elisp
	dotspacemacs-mode-line-theme '(doom)
  #+end_src
* 设置背景色，这个方法貌似很强大。 任何 theme的背景色，都可以用它修改。
  #+begin_src elisp
	(set-background-color "#0B2B2D")   ;; 把背景色改成 jonathan blow 使用的 绿色背景。
  #+end_src

** 直接修改值
*** 让 learder key  SPC 响应快一点。
	dotspacemacs-which-key-delay 0.1



*** 编辑风格选择 hybrid
	dotspacemacs-editing-style 'hybrid

** dotspacemacs-configuration-layers
*** 在 Mac 电脑上添加 osx， 这样会自动做一些 Mac 有关的设置。
	osx


** dotspacemacs/user-config()
*** 光标居中
	(global-centered-cursor-mode)

*** 取消中英混排时多出的空格。
	#+begin_src elisp
	  (global-pangu-spacing-mode 0)
	  (set (make-local-variable 'pangu-spacing-real-insert-separtor) nil)

	#+end_src

*** 在底部 mode-line 显示当前 buffer 的完整文件路径
	#+begin_src elisp
	  (with-eval-after-load 'spaceline-config
		(spaceline-define-segment buffer-id
		  (if (buffer-file-name)
			  (abbreviate-file-name (buffer-file-name))
			(powerline-buffer-id))))

	#+end_src

*** 设置 org 任务层级 对应的图标, 这里只设置了 4 级。 要个多级，继续往后加就是了。
	#+begin_src elisp
	  (with-eval-after-load 'org
		(setq org-bullets-bullet-list '("☰" "☷" "☯" "☭"))
		)
	#+end_src

*** c_c++ 缩进 4 个空格
	#+begin_src elisp
	  (setq-default c-basic-offset 4
					tab-width 4
					indent-tabs-mode t)
	  (setq c-default-style "linux")
	#+end_src

*** [在spacemase的 emacs 模式下时]设置打开文件时默认是只读模式
	#+begin_src elisp
	  (defun read-only-hook ()
		(read-only-mode 1))

	  (add-hook 'find-file-hook 'read-only-hook)
	  (add-to-list 'command-switch-alist '("--global-readonly" . read-only-hook))
	#+end_src

*** [在spacemase的 emacs 模式下时] 只读模式，插入模式设置不同的光标类型。
	#+begin_src elisp
	  (defun djcb-set-cursor-according-to-mode ()
		"change cursor color and type according to some minor modes."
		(cond
		 (buffer-read-only
		  (set-cursor-color "yellow")
		  (setq cursor-type 'hollow)
		  )
		 (overwrite-mode
		  (set-cursor-color "red")
		  (setq cursor-type 'hollow)
		  )
		 (t
		  (set-cursor-color "red")
		  (blink-cursor-mode t)    ;; 设置光标闪烁
		  (setq cursor-type 'bar)
		  )
		 )
		)
	  (add-hook 'post-command-hook 'djcb-set-cursor-according-to-mode)
	#+end_src

*** Mac 下让 emacs 和 系统剪切板 共享的方法 https://github.com/syl20bnr/spacemacs/issues/10896
	# 1. 添加附加包 dotspacemacs-additional-packages '(osx-clipboard)
	# 2. 在 user-config() 下添加如下配置
	#+begin_src elisp
	  (use-package osx-clipboard
		:commands
		(osx-clipboard-paste-function osx-clipboard-cut-function))

	  (defun aj/select-text (text &rest ignore)
		(if (display-graphic-p)
			(gui-select-text text)
		  (osx-clipboard-cut-function text)))

	  (defun aj/selection-value ()
		(if (display-graphic-p)
			(gui-selection-value)
		  (osx-clipboard-paste-function)))

	  (setq interprogram-cut-function 'aj/select-text
			interprogram-paste-function 'aj/selection-value)

	  (provide 'init-macos-terminal-copy-paste)
	#+end_src

* Git 设置
** 在 dotspacemacs-configuration-layers 启用 git 和 version-control
** 在 defun dotspacemacs/user-init ()中设置
   #+begin_src elisp
	 (setq-default git-magit-status-fullscreen t)    ;; 全屏显示 magit 的状态窗口
   #+end_src

* Test table align
  |------------------+----------------+------------------------|
  | tesr 看看不错     | 环澳           | very good              |
  |------------------+----------------+------------------------|
  | this is good job | your are right | thank you 妈妈         |
  | fdjfie           | jda            | 这回，卡款 ikdai1 ,dai1 |

  djaie *dkaei* dkaei*aa*djei/aa/
